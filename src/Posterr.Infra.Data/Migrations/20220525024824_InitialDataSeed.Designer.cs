// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Posterr.Infra.Data.Context;

#nullable disable

namespace Posterr.Infra.Data.Migrations
{
    [DbContext(typeof(PosterrDbContext))]
    [Migration("20220525024824_InitialDataSeed")]
    partial class InitialDataSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Posterr.Domain.Entities.PostEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("ParentId");

                    b.Property<string>("Text")
                        .HasMaxLength(777)
                        .HasColumnType("nvarchar(777)")
                        .HasColumnName("Text");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeId");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("UserId");

                    b.HasKey("Id")
                        .HasName("PK_Posts");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("ParentId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts", "dbo");
                });

            modelBuilder.Entity("Posterr.Domain.Entities.PostTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("TypeDescription")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("TypeDescription");

                    b.HasKey("Id")
                        .HasName("PK_PostTypes");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("PostTypes", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TypeDescription = "Post"
                        },
                        new
                        {
                            Id = 2,
                            TypeDescription = "Repost"
                        },
                        new
                        {
                            Id = 3,
                            TypeDescription = "Quote"
                        });
                });

            modelBuilder.Entity("Posterr.Domain.Entities.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("FollowersCount")
                        .HasColumnType("int")
                        .HasColumnName("FollowersCount");

                    b.Property<int>("FollowingCount")
                        .HasColumnType("int")
                        .HasColumnName("FollowingCount");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("JoinedAt");

                    b.Property<DateTime>("MetricsUpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("MetricsUpdatedAt");

                    b.Property<int>("PostsCount")
                        .HasColumnType("int")
                        .HasColumnName("PostsCount");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("Username");

                    b.HasKey("Id")
                        .HasName("PK_Users");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("Users", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            FollowersCount = 0,
                            FollowingCount = 0,
                            JoinedAt = new DateTime(2022, 5, 24, 23, 48, 24, 243, DateTimeKind.Local).AddTicks(2644),
                            MetricsUpdatedAt = new DateTime(2022, 5, 24, 23, 48, 24, 243, DateTimeKind.Local).AddTicks(2654),
                            PostsCount = 0,
                            Username = "cleiton.gangi"
                        },
                        new
                        {
                            Id = 2L,
                            FollowersCount = 0,
                            FollowingCount = 0,
                            JoinedAt = new DateTime(2022, 5, 24, 23, 48, 24, 243, DateTimeKind.Local).AddTicks(2655),
                            MetricsUpdatedAt = new DateTime(2022, 5, 24, 23, 48, 24, 243, DateTimeKind.Local).AddTicks(2655),
                            PostsCount = 0,
                            Username = "user2"
                        },
                        new
                        {
                            Id = 3L,
                            FollowersCount = 0,
                            FollowingCount = 0,
                            JoinedAt = new DateTime(2022, 5, 24, 23, 48, 24, 243, DateTimeKind.Local).AddTicks(2656),
                            MetricsUpdatedAt = new DateTime(2022, 5, 24, 23, 48, 24, 243, DateTimeKind.Local).AddTicks(2657),
                            PostsCount = 0,
                            Username = "user3"
                        });
                });

            modelBuilder.Entity("Posterr.Domain.Entities.UserFollowingEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("TargetUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("UserFollowing");
                });

            modelBuilder.Entity("Posterr.Domain.Entities.PostEntity", b =>
                {
                    b.HasOne("Posterr.Domain.Entities.PostEntity", "Parent")
                        .WithMany("Posts")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Posts_PostParent");

                    b.HasOne("Posterr.Domain.Entities.PostTypeEntity", "PostType")
                        .WithMany("Posts")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Posts_PostTypes");

                    b.HasOne("Posterr.Domain.Entities.UserEntity", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Posts_Users");

                    b.Navigation("Parent");

                    b.Navigation("PostType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Posterr.Domain.Entities.PostEntity", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Posterr.Domain.Entities.PostTypeEntity", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Posterr.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
